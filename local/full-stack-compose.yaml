---
version: "3.8"
services:
  chrome-db:
    image: quay.io/sclorg/postgresql-15-c9s:latest
    restart: always
    environment:
    - POSTGRESQL_USER=chrome
    - POSTGRESQL_PASSWORD=chrome
    - POSTGRESQL_DATABASE=chrome
    ports:
    - "5432:5432"
    volumes:
    - chrome-db:/var/lib/postgresql/data

  zoo1:
    image: quay.io/cloudservices/cp-zookeeper:7.2.1
    hostname: zoo1
    container_name: zoo1
    ports:
    - "${ZOOKEEPER_CLIENT_PORT}:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zoo1:2888:3888

  kafka1:
    image: quay.io/cloudservices/cp-kafka:7.2.1
    hostname: kafka1
    container_name: kafka1
    ports:
    - "${KAFKA_CLIENT_LISTEN_PORT}:9092"
    - "${KAFKA_CLIENT_LISTEN_PORT_2}:29092"
    - "${KAFKA_JMX_PORT}:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"
    depends_on:
    - zoo1

  # The Unleash server contains the Unleash configuration and
  # communicates with server-side SDKs and the Unleash Proxy
  unleash_web:
    image: quay.io/cloudservices/unleash-server:latest
    ports:
    - "${UNLEASH_WEB_PORT}:4242"
    environment:
      DATABASE_URL: "postgres://chrome:chrome@db/unleash"
      DATABASE_SSL: "false"
      LOG_LEVEL: "debug"
      INIT_FRONTEND_API_TOKENS: "default:development.unleash-insecure-frontend-api-token"
      INIT_CLIENT_API_TOKENS: "default:development.unleash-insecure-api-token"
      # This is setup to seed in feature flags, production is entirely different
      INIT_ADMIN_API_TOKENS: "*:*.unleash-insecure-api-token"
    depends_on:
      db:
        condition: service_healthy
    # Healthchecks aren't honored by compose anymore in depends_on
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://db:4242/health || exit 1
      interval: 1s
      timeout: 1m
      retries: 5
      start_period: 15s
    # Contains hard-coded sleep to wait for postgres to be ready
    command: [ "sh", "-c", "echo sleeping; sleep 30; node index.js"]

  # Note: Not all log data appears on the terminal output
  # To view more detailed log data, shell into the container and view like this:
  # cat var/lib/pgsql/data/userdata/log/postgresql-Tue.log
  db:
    expose:
    - "5432"
    image: quay.io/sclorg/postgresql-15-c9s:latest
    environment:
      - POSTGRESQL_DATABASE=unleash
      - POSTGRESQL_USER=chrome  
      - POSTGRESQL_PASSWORD=chrome
    healthcheck:
      test: ["CMD", "pg_isready", "--username=chrome", "--host=db", "--port=5432"]
      interval: 2s
      timeout: 1m
      retries: 5
      start_period: 10s
volumes:
  chrome-db:
    driver: local
